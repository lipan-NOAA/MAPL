module test_SubGrid
   use ESMF
   use pfunit
   use ESMF_TestMethod_mod
   use MAPL_OpenMP_Support
   use MAPL_CubedSphereGridFactoryMod, only: CubedSphereGridFactory
   use MAPL_MaplGrid
   implicit none
   
contains



   ! Starting with a simple Cubed-sphere grid, create a single
   ! local subgrid.  Verify that the local properties of the
   ! subgrid match the original grid.
    @test(npes=[6],type=newESMF_TestMethod)
    subroutine test_make_subGrid(this)
       class(ESMF_TestMethod), intent(inout) :: this
        integer :: im, nx, status, i, j
        type(CubedSphereGridFactory) :: primary_factory
        type(ESMF_Grid) :: primary_grid
        type(ESMF_Grid), allocatable :: subgrids(:) 
        real(kind=ESMF_KIND_R8), pointer :: lons(:,:), lats(:,:)
        real(kind=ESMF_KIND_R8), pointer :: corner_lons(:,:), corner_lats(:,:)
        real(kind=ESMF_KIND_R8), pointer :: sublons(:,:), sublats(:,:)
        real(kind=ESMF_KIND_R8), pointer :: corner_sublons(:,:), corner_sublats(:,:)
        integer :: local_count(3)
        type(Interval), allocatable :: bounds(:)
        integer :: tileCount, localDECount
        
        im = 12
        nx = 1
        primary_factory = CubedSphereGridFactory(im_world=im,nx=nx,ny=nx,lm=1,rc=status)
        @assertEqual(0,status)
        primary_grid = primary_factory%make_grid(rc=status)
        @assertEqual(0,status)
        
        call ESMF_GridGetCoord(grid=primary_grid, coordDim=1, localDE=0, &
            staggerloc=ESMF_STAGGERLOC_CENTER, farrayPtr=lons, rc=status)
        @assertEqual(0,status)
	call ESMF_GridGetCoord(grid=primary_grid, coordDim=2, localDE=0, &
            staggerloc=ESMF_STAGGERLOC_CENTER, farrayPtr=lats, rc=status)
	@assertEqual(0,status)
        call MAPL_GridGet(primary_grid,localcellcountPerDim=local_count, rc=status)
        @assertEqual(0,status)

        ! Set the coordiantes to synthetic values that are easier to 
        ! test
        do j = 1, local_count(2) 
            do i = 1, local_count(1)
                lons(i,j) = j
                lats(i,j) = i
            end do
        end do

        associate(im => local_count(1), jm => local_counts(2))
        allocate(corner_lons(im+1,jm+1),corner_lats(im+1,jm+1))

        call MAPL_GridGetCorners(primary_grid,corner_lons,corner_lats,rc=status)
        @assertEqual(0,status) 

        ! Synthetic bounds to choose a small subregion in the primary grid
        allocate(bounds(1))
        bounds%min = 2
        bounds%max = 4
        
        subgrids = make_subgrids(primary_grid, bounds, rc=status)
        @assertEqual(0,status)

        ! check 
        call ESMF_GridGet(subgrids(1), tileCount=tileCount, localDECount=localDECount, rc=status)
        @assertEqual(0, status)
        @assert_that(tileCount, is(1))
        @assert_that(localDECount, is(1))

        ! Check coordinates
        call ESMF_GridGetCoord(grid=subgrids(1), coordDim=1, localDE=0, &
            staggerloc=ESMF_STAGGERLOC_CENTER, farrayPtr=sublons, rc=status)
        @assertEqual(0,status)
        call ESMF_GridGetCoord(grid=subgrids(1), coordDim=2, localDE=0, &
            staggerloc=ESMF_STAGGERLOC_CENTER, farrayPtr=sublats, rc=status)
        @assertEqual(0,status)

        @assertEqual(lons(:,2:4), sublons)
        @assertEqual(lats(:,2:4), sublats)

        allocate(corner_sublons(4,4),corner_sublats(4,4))
        call MAPL_GridGetCorners(subgrids(1),corner_sublons,corner_sublats,rc=status)
        @assertEqual(0,status)

        @assertEqual(corner_lons(:,2:5), corner_sublons)
        @assertEqual(corner_lats(:,2:5), corner_sublats)

    end subroutine test_make_subGrid

end module test_SubGrid
