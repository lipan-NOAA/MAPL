module test_OpenMP_Support
    use pfunit
    use MAPL_OpenMP_Support
    use ESMF
    use MAPL_CubedSphereGridFactoryMod, only: CubedSphereGridFactory
    implicit NONE

    CONTAINS

    @test
    subroutine test_new_trivial()
        integer :: yDim = 1
        integer :: numGrids = 1
        type(Interval), allocatable :: bounds(:) 

        bounds = NewFindBounds(yDim, numGrids)

        @assertEqual(1, bounds(1)%min)
        @assertEqual(1, bounds(1)%max)
    end subroutine

    @test
    subroutine test_find_bounds_trivial1()
        integer :: yDim = 1
        integer :: numGrids = 1
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(1, bounds(1,2))
    end subroutine

    @test
    subroutine test_find_bounds_trivial2()
        integer :: yDim = 2
        integer :: numGrids = 1
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(2, bounds(1,2))
    end subroutine

    @test
    subroutine test_find_bounds_easy1()
        integer :: yDim = 4
        integer :: numGrids = 2
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(2, bounds(1,2))
        @assertEqual(3, bounds(2,1))
        @assertEqual(4, bounds(2,2))
    end subroutine

    @test
    subroutine test_find_bounds_easy2()
        integer :: yDim = 4
        integer :: numGrids = 3
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(1, bounds(1,2))
        @assertEqual(2, bounds(2,1))
        @assertEqual(2, bounds(2,2))
        @assertEqual(3, bounds(3,1))
        @assertEqual(4, bounds(3,2))
    end subroutine

    @test 
    subroutine test_find_bounds_even1() 
        integer :: yDim = 40
        integer :: numGrids = 4
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(10, bounds(1,2))
        @assertEqual(11, bounds(2,1))
        @assertEqual(20, bounds(2,2))
        @assertEqual(21, bounds(3,1))
        @assertEqual(30, bounds(3,2))
        @assertEqual(31, bounds(4,1))
        @assertEqual(40, bounds(4,2))
    end subroutine 

    @test
    subroutine test_find_bounds_even2()
        integer :: yDim = 81
        integer :: numGrids = 9
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(9, bounds(1,2))
        @assertEqual(10, bounds(2,1))
        @assertEqual(18, bounds(2,2))
        @assertEqual(19, bounds(3,1))
        @assertEqual(27, bounds(3,2))
        @assertEqual(28, bounds(4,1))
        @assertEqual(36, bounds(4,2))
        @assertEqual(37, bounds(5,1))
        @assertEqual(45, bounds(5,2))
        @assertEqual(46, bounds(6,1))
        @assertEqual(54, bounds(6,2))
        @assertEqual(55, bounds(7,1))
        @assertEqual(63, bounds(7,2))
        @assertEqual(64, bounds(8,1))
        @assertEqual(72, bounds(8,2))
        @assertEqual(73, bounds(9,1))
        @assertEqual(81, bounds(9,2))
    end subroutine

    @test
    subroutine test_find_bounds_odd1()
        integer :: yDim = 75
        integer :: numGrids = 4
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(18, bounds(1,2))    
        @assertEqual(19, bounds(2,1))   
        @assertEqual(37, bounds(2,2))
        @assertEqual(38, bounds(3,1))
        @assertEqual(56, bounds(3,2))
        @assertEqual(57, bounds(4,1))
        @assertEqual(75, bounds(4,2))
    end subroutine

    @test
    subroutine test_find_bounds_odd2()
        integer :: yDim = 100
        integer :: numGrids = 3
        integer, allocatable :: bounds(:,:) 

        call FindBounds(yDim, numGrids, bounds)

        @assertEqual(1, bounds(1,1))
        @assertEqual(33, bounds(1,2))    
        @assertEqual(34, bounds(2,1))   
        @assertEqual(66, bounds(2,2))
        @assertEqual(67, bounds(3,1))
        @assertEqual(100, bounds(3,2))
    end subroutine





end module test_OpenMP_Support 
