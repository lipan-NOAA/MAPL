module test_SubFieldBundle
   use ESMF
   use pfunit
   use ESMF_TestMethod_mod
   use MAPL_OpenMP_Support
   use MAPL_CubedSphereGridFactoryMod
   use MAPL_BaseMod
   implicit none


   type (ESMF_FieldBundle) :: trivial_bundle
   type (ESMF_FieldBundle) :: populated_bundle
   integer, parameter :: num_grids = 4
   integer, parameter :: num_fields = 3

   
contains


   @before
   subroutine setup(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ESMF_Field) :: empty_list(0)
      integer :: status
      type(ESMF_Field) :: f_list(num_fields)
      character(len=2) :: field_name
      integer :: i

      trivial_bundle = ESMF_FieldBundleCreate(fieldList=empty_list, &
           & name='trivial', rc=status)
      @assert_that(status, is(0))
      do i=1,num_fields
         write(field_name,'(a1,i1)')"f",i
         f_list(i) = ESMF_FieldEmptyCreate(name=field_name,rc=status)
         @assertEqual(0,status)
      enddo
      populated_bundle = ESMF_FieldBundleCreate(fieldList=f_list,name="foo",rc=status)
      @assertEqual(0,status)

      call ESMF_AttributeSet(populated_bundle, name='A1', value=7)
      call ESMF_AttributeSet(populated_bundle, name='A2', value=int(3, kind=ESMF_KIND_I4))
      call ESMF_AttributeSet(populated_bundle, name='A3', value=int(2, kind=ESMF_KIND_I8))
      call ESMF_AttributeSet(populated_bundle, name='A4', value=real(5.0, kind=ESMF_KIND_R4))
      call ESMF_AttributeSet(populated_bundle, name='A5', value=real(4.2, kind=ESMF_KIND_R8))
      call ESMF_AttributeSet(populated_bundle, name='A6', value=.FALSE.)
           
   end subroutine setup

   function mock_make_subfields(field, num_grids, rc) result(fields)
      type(ESMF_Field), allocatable :: fields(:)
      type(ESMF_Field), intent(in) :: field
      integer, intent(in) :: num_grids
      integer, optional, intent(out) :: rc

      integer :: status,i
      character(len=ESMF_MAXSTR) :: name

      call ESMF_FieldGet(field, name=name,rc=status)
      @assert_that(status, is(0))
      allocate(fields(num_grids))
      do i=1,num_grids
         fields(i) = ESMF_FieldEmptyCreate(name=trim(name),rc=status)
         @assert_that(status, is(0))
      enddo
      if (present(rc)) rc=0
   end function mock_make_subfields

   @after
   subroutine teardown(this)
      class(ESMF_TestMethod), intent(inout) :: this
      integer :: status
      call ESMF_FieldBundleDestroy(trivial_bundle, rc=status)
      @assert_that(status, is(0))
   end subroutine teardown


   @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_trivial_num_subfields(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
      integer :: status

      sub_bundles = make_subFieldBundles(trivial_bundle, num_grids=1, rc=status)
      @assert_that(status, is(0))
      @assert_that(size(sub_bundles), is(1))
     
      sub_bundles = make_subFieldbundles(trivial_bundle, num_grids=2, rc=status)
      @assert_that(status, is(0))
      @assert_that(size(sub_bundles), is(2))

   end subroutine test_trivial_num_subfields

   @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_trivial_name(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
      character(ESMF_MAXSTR) :: found_name
      
      integer :: status

      sub_bundles = make_subFieldbundles(trivial_bundle, num_grids=num_grids, rc=status)
      @assert_that(status, is(0))
      @assert_that(size(sub_bundles), is(num_grids))

      call ESMF_FieldBundleGet(sub_bundles(1), name=found_name, rc=status)
      @assert_that(status, is(0))
      @assertEqual('trivial', found_name)
      
   end subroutine test_trivial_name


   @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_trivial_num_fields(this)
      class(ESMF_TestMethod), intent(inout) :: this

      type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
      integer :: status
      integer :: expected_field_count, found_field_count

      sub_bundles = make_subFieldbundles(trivial_bundle, num_grids=3, rc=status)
      @assert_that(status, is(0))

      call ESMF_FieldBundleGet(trivial_bundle, fieldcount=expected_field_count, rc=status)
      call ESMF_FieldBundleGet(sub_bundles(1), fieldcount=found_field_count, rc=status)

      @assert_that(status, is(0))
      @assert_that(found_field_count, is(expected_field_count))

   end subroutine test_trivial_num_fields

   @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_populated_bundle(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
      integer :: status
      integer :: expected_field_count, found_field_count, i, j
      type(ESMF_Field), allocatable :: fields(:)
      type(ESMF_Field), allocatable :: subfields(:)
      character(ESMF_MAXSTR) :: fname,sub_fname
      character(ESMF_MAXSTR) :: bname,sub_bname

      sub_bundles = make_subFieldbundles(populated_bundle, num_grids=num_grids, make=mock_make_subfields, rc=status)
      @assert_that(status, is(0))
      @assert_that(size(sub_bundles),is(num_grids))

      call ESMF_FieldBundleGet(populated_bundle, fieldcount=expected_field_count, name=bname, rc=status)
      do i=1,size(sub_bundles)
         call ESMF_FieldBundleGet(sub_bundles(i), fieldcount=found_field_count, name=sub_bname, rc=status)
         @assert_that(status, is(0))
         @assert_that(found_field_count, is(expected_field_count))
         @assertequal(trim(bname),trim(sub_bname))
      enddo


      allocate(fields(expected_field_count))
      allocate(subfields(found_field_count))
      call ESMF_FieldBundleGet(populated_bundle,fieldList=fields,rc=status)
      @assert_that(status, is(0))


      do j=1,num_grids
         call ESMF_FieldBundleGet(sub_bundles(j),fieldList=subfields,rc=status)
         @assert_that(status, is(0))
         do i=1,size(fields)
            call ESMF_FieldGet(fields(i),name=fname,rc=status)
            call ESMF_FieldGet(subfields(i),name=sub_fname,rc=status)
            @assertequal(trim(fname),trim(sub_fname))
         enddo
      enddo

  end subroutine test_populated_bundle

  @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_subFieldBundle_name(this)
     class(ESMF_TestMethod), intent(inout) :: this
     integer :: status
     type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
     integer :: i
     character(len=ESMF_MAXSTR) :: expected_name, found_name
     
     ! trivial bundle
     sub_bundles = make_subFieldBundles(trivial_bundle, num_grids=num_grids, make=mock_make_subfields, rc=status)
     @assert_that(status, is(0))
     call ESMF_FieldBundleGet(trivial_bundle, name=expected_name, rc=status)
     @assert_that(status, is(0))
     do i = 1, num_grids
        call ESMF_FieldBundleGet(sub_bundles(i), name=found_name, rc=status)
        @assert_that(status, is(0))
        @assertEqual(expected_name, found_name)
     end do
       

     ! populated bundle
     sub_bundles = make_subFieldBundles(populated_bundle, num_grids=num_grids, make=mock_make_subfields, rc=status)
     @assert_that(status, is(0))
     call ESMF_FieldBundleGet(populated_bundle, name=expected_name, rc=status)
     @assert_that(status, is(0))
     do i = 1, num_grids
        call ESMF_FieldBundleGet(sub_bundles(i), name=found_name, rc=status)
        @assert_that(status, is(0))
        @assertEqual(expected_name, found_name)
     end do

   end subroutine test_subFieldBundle_name

   
   @test(npes=[6],type=newESMF_TestMethod)
   subroutine test_subFieldBundle_attributes(this)
     class(ESMF_TestMethod), intent(inout) :: this
     integer :: status
     type(ESMF_FieldBundle), allocatable :: sub_bundles(:)
     integer :: i, count
     type(ESMF_TYPEKIND_FLAG) :: typekind
     integer(kind=ESMF_KIND_I4) :: i4_val
     integer(kind=ESMF_KIND_I8) :: i8_val
     real(kind=ESMF_KIND_R4) :: r4_val
     real(kind=ESMF_KIND_R8) :: r8_val
     logical :: bool_val
     
     sub_bundles = make_subFieldBundles(populated_bundle, num_grids=num_grids, make=mock_make_subfields, rc=status)
     @assert_that(status, is(0))

     do i = 1, size(sub_bundles)
        ! check attribute count
        call ESMF_AttributeGet(sub_bundles(i), count=count, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(count, is(6))

        ! check attribute typekind 
        call ESMF_AttributeGet(sub_bundles(i), name='A1', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_I4)

        call ESMF_AttributeGet(sub_bundles(i), name='A2', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_I4)
     
        call ESMF_AttributeGet(sub_bundles(i), name='A3', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_I8)
      
        call ESMF_AttributeGet(sub_bundles(i), name='A4', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_R4)
       
        call ESMF_AttributeGet(sub_bundles(i), name='A5', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_R8)
       
        call ESMF_AttributeGet(sub_bundles(i), name='A6', typekind=typekind, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assertTrue(typekind == ESMF_TYPEKIND_LOGICAL)
        

        ! check attribute value
        call ESMF_AttributeGet(sub_bundles(i), name='A1', value=i4_val, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(i4_val, is(7))

        call ESMF_AttributeGet(sub_bundles(i), name='A2', value=i4_val,  rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(i4_val, is(3))

        call ESMF_AttributeGet(sub_bundles(i), name='A3', value=i8_val,  rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(i8_val, is(2_ESMF_KIND_I8))

        call ESMF_AttributeGet(sub_bundles(i), name='A4', value=r4_val,  rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(r4_val, is(5.0_ESMF_KIND_R4))

        call ESMF_AttributeGet(sub_bundles(i), name='A5', value=r8_val, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(r8_val, is(4.2_ESMF_KIND_R8))
        ! ^ failing, actual value is 4.199999809265137D

        call ESMF_AttributeGet(sub_bundles(i), name='A6', value=bool_val, rc=status)
        @assert_that(status, is(ESMF_SUCCESS))
        @assert_that(bool_val, is(false()))
     end do

     
   end subroutine test_subFieldBundle_attributes
end module test_SubFieldBundle
