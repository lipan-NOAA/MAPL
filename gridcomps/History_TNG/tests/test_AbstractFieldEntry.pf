#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"

module test_AbstractFieldEntry
   use, intrinsic :: iso_fortran_env, only: INT64
   use pFUnit
   use ESMF
   use NUOPC
   use gFTL_StringVector
   use MAPL_ExceptionHandling
   use MAPL_KeywordEnforcerMod

   use AbstractFieldEntryMod

   character(*), parameter :: short_name        = 'short_name'
   character(*), parameter :: component_name    = 'component_name'
   character(*), parameter :: field_units       = 'field_units'
   character(*), parameter :: true_standard     = 'short_name.component_name'
   character(*), parameter :: registered_name   = 'resgistered_name'
   character(*), parameter :: unregistered_name = 'unresgistered_name'
   character(*), parameter :: syno_name1        = 'syno_name1'
   character(*), parameter :: syno_name2        = 'syno_name2'
   character(*), parameter :: not_syno_name1    = 'not_syno_name1'
   character(*), parameter :: not_syno_name2    = 'not_syno_name2'
   character(*), parameter :: match_names       = 'match_names'
   character(*), parameter :: unmatch_names     = 'unmatch_names'
   character(*), parameter :: other_name        = 'other_name'

   type, extends(AbstractFieldEntry) :: mock_AbstractFieldEntry
      integer :: call_name = 0
   contains
      procedure :: initialize => init
      procedure :: name
   end type mock_AbstractFieldEntry

   type, extends(mock_AbstractFieldEntry) :: mock_AbstractFieldEntry_NUOPC
      integer :: has_entry = 0
      integer :: add_entry = 0
      integer :: are_syno  = 0
      integer :: add_syno  = 0

      character(:), allocatable :: has_entry_name
      character(:), allocatable :: add_entry_name
      character(:), allocatable :: add_entry_units

      character(:), allocatable :: are_syno_name1
      character(:), allocatable :: are_syno_name2
      character(:), allocatable :: add_syno_name1
      character(:), allocatable :: add_syno_name2
   contains
      procedure :: NUOPC_has_entry
      procedure :: NUOPC_add_entry
      procedure :: NUOPC_are_syno
      procedure :: NUOPC_add_syno
   end type mock_AbstractFieldEntry_NUOPC

   type, extends(mock_AbstractFieldEntry) :: mock_AbstractFieldEntry_register
      integer :: call_standard_name = 0
      integer :: call_register_name = 0
      integer :: call_register_syno = 0

      type(StringVector)        :: registered_names
      type(StringVector)        :: registered_units
      character(:), allocatable :: register_syno_name1
      character(:), allocatable :: register_syno_name2
   contains
      procedure :: standard_name
      procedure :: register_name
      procedure :: register_syno
   end type mock_AbstractFieldEntry_register

   type, extends(mock_AbstractFieldEntry) :: mock_AbstractFieldEntry_advertise
      integer :: call_register = 0
      integer :: call_advert   = 0

      character(:), allocatable :: advert_name
      character(:), allocatable :: TransferOfferGeomObject
      character(:), allocatable :: SharePolicyField
      character(:), allocatable :: SharePolicyGeomObject
   contains
      procedure :: register
      procedure :: NUOPC_advert
   end type mock_AbstractFieldEntry_advertise
contains
   subroutine init(this, short_name, component_name, unusable, units, alias_name)
      class(mock_AbstractFieldEntry),   intent(  out) :: this
      character(*),                     intent(in   ) :: short_name
      character(*),                     intent(in   ) :: component_name
      class(KeywordEnforcer), optional, intent(in   ) :: unusable
      character(*),           optional, intent(in   ) :: units
      character(*),           optional, intent(in   ) :: alias_name

      _UNUSED_DUMMY(unusable)
      _UNUSED_DUMMY(alias_name)

      call this%base_initialize(short_name, component_name, units=units)
   end subroutine init

   function name(this) result(field_name)
      character(:), allocatable :: field_name
      class(mock_AbstractFieldEntry), intent(inout) :: this

      this%call_name = this%call_name + 1

      if (this%get_short_name() == match_names) then
         field_name = this%get_short_name()
      else
         field_name = other_name
      end if
   end function name

   subroutine NUOPC_has_entry(this, name, has_entry, unusable, rc)
      class(mock_AbstractFieldEntry_NUOPC), intent(inout) :: this
      character(*),                         intent(in   ) :: name
      logical,                              intent(  out) :: has_entry
      class(KeywordEnforcer), optional,     intent(  out) :: unusable
      integer,                optional,     intent(  out) :: rc

      integer :: status = 0

      _UNUSED_DUMMY(unusable)

      this%has_entry = this%has_entry + 1
      this%has_entry_name = name

      select case (name)
      case (registered_name)
         has_entry = .true.
      case (unregistered_name)
         has_entry = .false.
      case default
         status = 1
      end select

      _RETURN(status)
   end subroutine NUOPC_has_entry

   subroutine NUOPC_add_entry(this, name, units, unusable, rc)
      class(mock_AbstractFieldEntry_NUOPC), intent(inout) :: this
      character(*),                         intent(in   ) :: name
      character(*),                         intent(in   ) :: units
      class(KeywordEnforcer), optional,     intent(  out) :: unusable
      integer,                optional,     intent(  out) :: rc

      integer :: status = 0

      _UNUSED_DUMMY(unusable)

      this%add_entry = this%add_entry + 1
      this%add_entry_name  = name
      this%add_entry_units = units

      _RETURN(status)
   end subroutine NUOPC_add_entry

   subroutine NUOPC_are_syno(this, name1, name2, are_syno, unusable, rc)
      class(mock_AbstractFieldEntry_NUOPC), intent(inout) :: this
      character(*),                         intent(in   ) :: name1
      character(*),                         intent(in   ) :: name2
      logical,                              intent(  out) :: are_syno
      class(KeywordEnforcer), optional,     intent(  out) :: unusable
      integer,                optional,     intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%are_syno = this%are_syno + 1
      this%are_syno_name1 = name1
      this%are_syno_name2 = name2

      are_syno = ((name1 == syno_name1) .and. (name2 == syno_name2))

      _RETURN(_SUCCESS)
   end subroutine NUOPC_are_syno

   subroutine NUOPC_add_syno(this, name1, name2, unusable, rc)
      class(mock_AbstractFieldEntry_NUOPC), intent(inout) :: this
      character(*),                         intent(in   ) :: name1
      character(*),                         intent(in   ) :: name2
      class(KeywordEnforcer), optional,     intent(  out) :: unusable
      integer,                optional,     intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%add_syno = this%add_syno + 1
      this%add_syno_name1 = name1
      this%add_syno_name2 = name2

      _RETURN(_SUCCESS)
   end subroutine NUOPC_add_syno

   function standard_name(this) result(std_name)
      character(:), allocatable :: std_name
      class(mock_AbstractFieldEntry_register), intent(inout) :: this

      this%call_standard_name = this%call_standard_name + 1

      std_name = this%get_short_name()
   end function standard_name

   subroutine register_name(this, name, units, unusable, rc)
      class(mock_AbstractFieldEntry_register), intent(inout) :: this
      character(*),                            intent(in   ) :: name
      character(*),                            intent(in   ) :: units
      class(KeywordEnforcer), optional,        intent(  out) :: unusable
      integer,                optional,        intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%call_register_name = this%call_register_name + 1
      call this%registered_names%push_back(name)
      call this%registered_units%push_back(units)

      _RETURN(_SUCCESS)
   end subroutine register_name

   subroutine register_syno(this, name1, name2, unusable, rc)
      class(mock_AbstractFieldEntry_register), intent(inout) :: this
      character(*),                            intent(in   ) :: name1
      character(*),                            intent(in   ) :: name2
      class(KeywordEnforcer), optional,        intent(  out) :: unusable
      integer,                optional,        intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%call_register_syno = this%call_register_syno + 1
      this%register_syno_name1 = name1
      this%register_syno_name2 = name2

      _RETURN(_SUCCESS)
   end subroutine register_syno

   subroutine register(this, unusable, rc)
      class(mock_AbstractFieldEntry_advertise), intent(inout) :: this
      class(KeywordEnforcer), optional,         intent(  out) :: unusable
      integer,                optional,         intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%call_register = this%call_register + 1

      _RETURN(_SUCCESS)
   end subroutine register

   subroutine NUOPC_advert(this, state, standard_name, unusable,&
         TransferOfferGeomObject, SharePolicyField, SharePolicyGeomObject, rc)
      class(mock_AbstractFieldEntry_advertise), intent(inout) :: this
      type(ESMF_State),                         intent(inout) :: state
      character(*),                             intent(in   ) :: standard_name
      class(KeywordEnforcer), optional,         intent(in   ) :: unusable
      character(*),           optional,         intent(in   ) :: TransferOfferGeomObject
      character(*),           optional,         intent(in   ) :: SharePolicyField
      character(*),           optional,         intent(in   ) :: SharePolicyGeomObject
      integer,                optional,         intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(unusable)

      this%call_advert = this%call_advert + 1
      this%advert_name = standard_name

      if (present(TransferOfferGeomObject)) this%TransferOfferGeomObject = TransferOfferGeomObject
      if (present(SharePolicyField))        this%SharePolicyField        = SharePolicyField
      if (present(SharePolicyGeomObject))   this%SharePolicyGeomObject   = SharePolicyGeomObject

      _RETURN(_SUCCESS)
   end subroutine NUOPC_advert

   @test
   subroutine test_base_initialize()
      type(mock_AbstractFieldEntry) :: field_entry_no_units
      type(mock_AbstractFieldEntry) :: field_entry_units

      call field_entry_no_units%base_initialize(short_name, component_name)
      @assert_that(field_entry_no_units%get_short_name()     == short_name,     is(true()))
      @assert_that(field_entry_no_units%get_component_name() == component_name, is(true()))
      @assert_that(field_entry_no_units%get_units()          == default_units,  is(true()))

      call field_entry_units%base_initialize(short_name, component_name, units=field_units)
      @assert_that(field_entry_units%get_short_name()     == short_name,     is(true()))
      @assert_that(field_entry_units%get_component_name() == component_name, is(true()))
      @assert_that(field_entry_units%get_units()          == field_units,    is(true()))
   end subroutine test_base_initialize

   @test
   subroutine test_set_units()
      type(mock_AbstractFieldEntry) :: field_entry1
      type(mock_AbstractFieldEntry) :: field_entry2

      integer :: status

      @assert_that(field_units == default_units, is(false()))

      call field_entry1%base_initialize(short_name, component_name)
      @assert_that(field_entry1%get_units() == default_units,  is(true()))

      call field_entry1%set_units(field_units, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry1%get_units() == field_units, is(true()))

      call field_entry1%set_units(default_units, rc=status)
      @assert_that(status, is(equal_to(1)))
      @assert_that(field_entry1%get_units() == field_units, is(true()))

      call field_entry2%base_initialize(short_name, component_name)
      @assert_that(field_entry2%get_units() == default_units,  is(true()))

      call field_entry2%set_units(field_units, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry2%get_units() == field_units, is(true()))

      call field_entry2%set_units(default_units, rc=status)
      @assert_that(status, is(equal_to(1)))
      @assert_that(field_entry2%get_units() == field_units, is(true()))
   end subroutine test_set_units

   @test
   subroutine test_standard_name()
      type(mock_AbstractFieldEntry) :: field_entry

      call field_entry%initialize(short_name, component_name, units=field_units)
      @assert_that(field_entry%standard_name() == true_standard, is(true()))
   end subroutine test_standard_name

   @test
   subroutine test_register_name()
      type(mock_AbstractFieldEntry_NUOPC) :: field_entry_no_add
      type(mock_AbstractFieldEntry_NUOPC) :: field_entry_add

      integer :: status

      @assert_that(field_entry_no_add%has_entry, is(equal_to(0)))
      @assert_that(field_entry_no_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_entry_no_add%has_entry_name),  is(false()))
      @assert_that(allocated(field_entry_no_add%add_entry_name),  is(false()))
      @assert_that(allocated(field_entry_no_add%add_entry_units), is(false()))

      call field_entry_no_add%register_name(registered_name, field_units, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_no_add%has_entry, is(equal_to(1)))
      @assert_that(field_entry_no_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_entry_no_add%has_entry_name),  is(true()))
      @assert_that(allocated(field_entry_no_add%add_entry_name),  is(false()))
      @assert_that(allocated(field_entry_no_add%add_entry_units), is(false()))
      @assert_that(field_entry_no_add%has_entry_name == registered_name, is(true()))

      @assert_that(field_entry_add%has_entry, is(equal_to(0)))
      @assert_that(field_entry_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_entry_add%has_entry_name),  is(false()))
      @assert_that(allocated(field_entry_add%add_entry_name),  is(false()))
      @assert_that(allocated(field_entry_add%add_entry_units), is(false()))

      call field_entry_add%register_name(unregistered_name, field_units, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_add%has_entry, is(equal_to(1)))
      @assert_that(field_entry_add%add_entry, is(equal_to(1)))
      @assert_that(allocated(field_entry_add%has_entry_name),  is(true()))
      @assert_that(allocated(field_entry_add%add_entry_name),  is(true()))
      @assert_that(allocated(field_entry_add%add_entry_units), is(true()))
      @assert_that(field_entry_add%has_entry_name  == unregistered_name, is(true()))
      @assert_that(field_entry_add%add_entry_name  == unregistered_name, is(true()))
      @assert_that(field_entry_add%add_entry_units == field_units,       is(true()))
   end subroutine test_register_name

   @test
   subroutine test_register_syno()
      type(mock_AbstractFieldEntry_NUOPC) :: field_entry_no_syno
      type(mock_AbstractFieldEntry_NUOPC) :: field_entry_syno

      integer :: status

      @assert_that(field_entry_no_syno%are_syno, is(equal_to(0)))
      @assert_that(field_entry_no_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_entry_no_syno%are_syno_name1), is(false()))
      @assert_that(allocated(field_entry_no_syno%are_syno_name2), is(false()))
      @assert_that(allocated(field_entry_no_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_entry_no_syno%add_syno_name2), is(false()))

      call field_entry_no_syno%register_syno(not_syno_name1, not_syno_name2, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_no_syno%are_syno, is(equal_to(1)))
      @assert_that(field_entry_no_syno%add_syno, is(equal_to(1)))
      @assert_that(allocated(field_entry_no_syno%are_syno_name1), is(true()))
      @assert_that(allocated(field_entry_no_syno%are_syno_name2), is(true()))
      @assert_that(allocated(field_entry_no_syno%add_syno_name1), is(true()))
      @assert_that(allocated(field_entry_no_syno%add_syno_name2), is(true()))
      @assert_that(field_entry_no_syno%are_syno_name1 == not_syno_name1, is(true()))
      @assert_that(field_entry_no_syno%are_syno_name2 == not_syno_name2, is(true()))
      @assert_that(field_entry_no_syno%add_syno_name1 == not_syno_name1, is(true()))
      @assert_that(field_entry_no_syno%add_syno_name2 == not_syno_name2, is(true()))

      @assert_that(field_entry_syno%are_syno, is(equal_to(0)))
      @assert_that(field_entry_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_entry_syno%are_syno_name1), is(false()))
      @assert_that(allocated(field_entry_syno%are_syno_name2), is(false()))
      @assert_that(allocated(field_entry_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_entry_syno%add_syno_name2), is(false()))

      call field_entry_syno%register_syno(syno_name1, syno_name2, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_syno%are_syno, is(equal_to(1)))
      @assert_that(field_entry_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_entry_syno%are_syno_name1), is(true()))
      @assert_that(allocated(field_entry_syno%are_syno_name2), is(true()))
      @assert_that(allocated(field_entry_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_entry_syno%add_syno_name2), is(false()))
      @assert_that(field_entry_syno%are_syno_name1 == syno_name1, is(true()))
      @assert_that(field_entry_syno%are_syno_name2 == syno_name2, is(true()))
   end subroutine test_register_syno

   @test
   subroutine test_register()
      type(mock_AbstractFieldEntry_register) :: field_entry_no_match
      type(mock_AbstractFieldEntry_register) :: field_entry_match

      integer :: status

      call field_entry_no_match%initialize(unmatch_names, component_name, units=field_units)
      @assert_that(field_entry_no_match%call_name,          is(equal_to(0)))
      @assert_that(field_entry_no_match%call_standard_name, is(equal_to(0)))
      @assert_that(field_entry_no_match%call_register_name, is(equal_to(0)))
      @assert_that(field_entry_no_match%call_register_syno, is(equal_to(0)))
      @assert_that(field_entry_no_match%registered_names%size(), is(equal_to(0_INT64)))
      @assert_that(field_entry_no_match%registered_units%size(), is(equal_to(0_INT64)))
      @assert_that(allocated(field_entry_no_match%register_syno_name1), is(false()))
      @assert_that(allocated(field_entry_no_match%register_syno_name2), is(false()))

      call field_entry_no_match%register(rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_no_match%call_name,          is(equal_to(1)))
      @assert_that(field_entry_no_match%call_standard_name, is(equal_to(1)))
      @assert_that(field_entry_no_match%call_register_name, is(equal_to(2)))
      @assert_that(field_entry_no_match%call_register_syno, is(equal_to(1)))
      @assert_that(field_entry_no_match%registered_names%size(), is(equal_to(2_INT64)))
      @assert_that(field_entry_no_match%registered_names%at(1) == unmatch_names, is(true()))
      @assert_that(field_entry_no_match%registered_names%at(2) == other_name,    is(true()))
      @assert_that(field_entry_no_match%registered_units%size(), is(equal_to(2_INT64)))
      @assert_that(field_entry_no_match%registered_units%at(1) == field_units, is(true()))
      @assert_that(field_entry_no_match%registered_units%at(2) == field_units, is(true()))
      @assert_that(allocated(field_entry_no_match%register_syno_name1), is(true()))
      @assert_that(allocated(field_entry_no_match%register_syno_name2), is(true()))
      @assert_that(field_entry_no_match%register_syno_name1 == unmatch_names, is(true()))
      @assert_that(field_entry_no_match%register_syno_name2 == other_name,    is(true()))

      call field_entry_match%initialize(match_names, component_name, units=field_units)
      @assert_that(field_entry_match%call_name,          is(equal_to(0)))
      @assert_that(field_entry_match%call_standard_name, is(equal_to(0)))
      @assert_that(field_entry_match%call_register_name, is(equal_to(0)))
      @assert_that(field_entry_match%call_register_syno, is(equal_to(0)))
      @assert_that(field_entry_match%registered_names%size(), is(equal_to(0_INT64)))
      @assert_that(field_entry_match%registered_units%size(), is(equal_to(0_INT64)))
      @assert_that(allocated(field_entry_match%register_syno_name1), is(false()))
      @assert_that(allocated(field_entry_match%register_syno_name2), is(false()))

      call field_entry_match%register(rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_match%call_name,          is(equal_to(1)))
      @assert_that(field_entry_match%call_standard_name, is(equal_to(1)))
      @assert_that(field_entry_match%call_register_name, is(equal_to(1)))
      @assert_that(field_entry_match%call_register_syno, is(equal_to(0)))
      @assert_that(field_entry_match%registered_names%size(), is(equal_to(1_INT64)))
      @assert_that(field_entry_match%registered_names%at(1) == match_names, is(true()))
      @assert_that(field_entry_match%registered_units%size(), is(equal_to(1_INT64)))
      @assert_that(field_entry_match%registered_units%at(1) == field_units, is(true()))
      @assert_that(allocated(field_entry_match%register_syno_name1), is(false()))
      @assert_that(allocated(field_entry_match%register_syno_name2), is(false()))
   end subroutine test_register

   @test
   subroutine test_advertise()
      type(mock_AbstractFieldEntry_advertise) :: field_entry_no_optional
      type(mock_AbstractFieldEntry_advertise) :: field_entry_optional

      type(ESMF_State) :: state
      integer :: status

      call field_entry_no_optional%initialize(unmatch_names, component_name)
      @assert_that(field_entry_optional%call_name,        is(equal_to(0)))
      @assert_that(field_entry_no_optional%call_register, is(equal_to(0)))
      @assert_that(field_entry_no_optional%call_advert,   is(equal_to(0)))
      @assert_that(allocated(field_entry_no_optional%advert_name), is(false()))
      @assert_that(allocated(field_entry_no_optional%TransferOfferGeomObject), is(false()))
      @assert_that(allocated(field_entry_no_optional%SharePolicyField),        is(false()))
      @assert_that(allocated(field_entry_no_optional%SharePolicyGeomObject),   is(false()))

      call field_entry_no_optional%advertise(state, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_no_optional%call_name,     is(equal_to(1)))
      @assert_that(field_entry_no_optional%call_register, is(equal_to(1)))
      @assert_that(field_entry_no_optional%call_advert,   is(equal_to(1)))
      @assert_that(allocated(field_entry_no_optional%advert_name), is(true()))
      @assert_that(field_entry_no_optional%advert_name == other_name, is(true()))
      @assert_that(allocated(field_entry_no_optional%TransferOfferGeomObject), is(false()))
      @assert_that(allocated(field_entry_no_optional%SharePolicyField),        is(false()))
      @assert_that(allocated(field_entry_no_optional%SharePolicyGeomObject),   is(false()))

      call field_entry_optional%initialize(unmatch_names, component_name)
      @assert_that(field_entry_optional%call_name,        is(equal_to(0)))
      @assert_that(field_entry_optional%call_register, is(equal_to(0)))
      @assert_that(field_entry_optional%call_advert,   is(equal_to(0)))
      @assert_that(allocated(field_entry_optional%advert_name), is(false()))
      @assert_that(allocated(field_entry_optional%TransferOfferGeomObject), is(false()))
      @assert_that(allocated(field_entry_optional%SharePolicyField),        is(false()))
      @assert_that(allocated(field_entry_optional%SharePolicyGeomObject),   is(false()))

      call field_entry_optional%advertise(state, &
         TransferOfferGeomObject='test1', &
         SharePolicyField='test2', &
         SharePolicyGeomObject='test3',&
         rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_optional%call_name,     is(equal_to(1)))
      @assert_that(field_entry_optional%call_register, is(equal_to(1)))
      @assert_that(field_entry_optional%call_advert,   is(equal_to(1)))
      @assert_that(allocated(field_entry_optional%advert_name), is(true()))
      @assert_that(field_entry_optional%advert_name == other_name, is(true()))
      @assert_that(allocated(field_entry_optional%TransferOfferGeomObject), is(true()))
      @assert_that(field_entry_optional%TransferOfferGeomObject == 'test1', is(true()))
      @assert_that(allocated(field_entry_optional%SharePolicyField),        is(true()))
      @assert_that(field_entry_optional%SharePolicyField == 'test2', is(true()))
      @assert_that(allocated(field_entry_optional%SharePolicyGeomObject),   is(true()))
      @assert_that(field_entry_optional%SharePolicyGeomObject == 'test3', is(true()))
   end subroutine test_advertise
end module test_AbstractFieldEntry
