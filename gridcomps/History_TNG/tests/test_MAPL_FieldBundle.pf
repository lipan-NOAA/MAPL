#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"

module Test_MAPL_FieldBundle
   use, intrinsic :: iso_fortran_env, only: INT64
   use pFUnit
   use ESMF
   use NUOPC
   use MAPL_ExceptionHandling
   use MAPL_KeywordEnforcerMod

   use MAPL_AbstractFieldEntry
   use MAPL_FieldRegistryEntry
   use MAPL_FieldRegistry
   use MAPL_FieldBundleEntry
   use MAPL_FieldBundle

   character(*), parameter :: short_name     = 'short_name'
   character(*), parameter :: component_name = 'component_name'
   character(*), parameter :: units          = 'units'
   character(*), parameter :: alias_name     = 'alias_name'
   character(*), parameter :: entry_name     = 'alias_name.short_name.component_name'
   character(*), parameter :: standard_name  = 'short_name.component_name'

   ! HACK for testing if advertise is called
   integer :: field_entry_1_call_advertise
   integer :: field_entry_2_call_advertise

   type, extends(FieldBundleEntry) :: test_FieldBundleEntry
   contains
      procedure :: initialize => init
      procedure :: advertise
   end type test_FieldBundleEntry
contains
   subroutine init(this, short_name, component_name, unusable, units, alias_name)
      class(test_FieldBundleEntry),     intent(  out) :: this
      character(*),                     intent(in   ) :: short_name
      character(*),                     intent(in   ) :: component_name
      class(KeywordEnforcer), optional, intent(in   ) :: unusable
      character(*),           optional, intent(in   ) :: units
      character(*),           optional, intent(in   ) :: alias_name

      _UNUSED_DUMMY(unusable)

      call this%FieldBundleEntry%initialize(short_name, component_name, &
         units=units, alias_name=alias_name)

      if (present(alias_name)) then
         field_entry_2_call_advertise = 0
      else
         field_entry_1_call_advertise = 0
      end if
   end subroutine init

   subroutine advertise(this, state, unusable,&
         TransferOfferGeomObject, SharePolicyField, SharePolicyGeomObject, rc)
      class(test_FieldBundleEntry),     intent(inout) :: this
      type(ESMF_State),                 intent(inout) :: state
      class(KeywordEnforcer), optional, intent(in   ) :: unusable
      character(*),           optional, intent(in   ) :: TransferOfferGeomObject
      character(*),           optional, intent(in   ) :: SharePolicyField
      character(*),           optional, intent(in   ) :: SharePolicyGeomObject
      integer,                optional, intent(  out) :: rc

      integer :: status

      _UNUSED_DUMMY(state)
      _UNUSED_DUMMY(unusable)
      _UNUSED_DUMMY(TransferOfferGeomObject)
      _UNUSED_DUMMY(SharePolicyField)
      _UNUSED_DUMMY(SharePolicyGeomObject)

      if (this%name() == entry_name) then
         field_entry_1_call_advertise = field_entry_1_call_advertise + 1
      else if (this%name() == standard_name) then
         field_entry_2_call_advertise = field_entry_2_call_advertise + 1
      end if

      _RETURN(_SUCCESS)
   end subroutine advertise

   @test
   subroutine test_map()
      type(FieldBundle)               :: field_bundle
      type(FieldBundleEntry)          :: field_entry
      type(FieldBundleEntry), pointer :: field_bundle_entry

      call field_entry%initialize(short_name, component_name, units=units, alias_name=alias_name)

      @assert_that(field_bundle%size(),            is(equal_to(0_INT64)))
      @assert_that(field_bundle%count(entry_name), is(equal_to(0_INT64)))
      call field_bundle%insert(field_entry)
      @assert_that(field_bundle%size(),            is(equal_to(1_INT64)))
      @assert_that(field_bundle%count(entry_name), is(equal_to(1_INT64)))

      field_bundle_entry = field_bundle%at(entry_name)
      @assert_that(field_bundle_entry%get_short_name()     == short_name,     is(true()))
      @assert_that(field_bundle_entry%get_component_name() == component_name, is(true()))
      @assert_that(field_bundle_entry%get_alias_name()     == alias_name,     is(true()))
   end subroutine test_map

   @test
   subroutine test_advertise()
      type(FieldBundle)           :: field_bundle
      type(test_FieldBundleEntry) :: field_entry_1
      type(test_FieldBundleEntry) :: field_entry_2
      type(ESMF_State)            :: state

      integer :: status

      call field_entry_1%initialize(short_name, component_name, units=units)
      call field_entry_2%initialize(short_name, component_name, units=units, alias_name=alias_name)
      call field_bundle%insert(field_entry_1)
      call field_bundle%insert(field_entry_2)
      @assert_that(field_bundle%size(), is(equal_to(2_INT64)))

      @assert_that(field_entry_1_call_advertise, is(equal_to(0)))
      @assert_that(field_entry_2_call_advertise, is(equal_to(0)))
      call field_bundle%advertise(state, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_entry_1_call_advertise, is(equal_to(1)))
      @assert_that(field_entry_2_call_advertise, is(equal_to(1)))
   end subroutine test_advertise

   @test
   subroutine test_register()
      type(FieldBundle)                 :: field_bundle
      type(FieldBundleEntry)            :: field_entry_1
      type(FieldBundleEntry)            :: field_entry_2
      type(FieldRegistry)               :: field_registry
      type(FieldRegistryEntry), pointer :: field_registry_entry

      character(*), parameter :: short_name_1     = 'short_name_1'
      character(*), parameter :: short_name_2     = 'short_name_2'
      character(*), parameter :: component_name_1 = 'component_name_1'
      character(*), parameter :: component_name_2 = 'component_name_2'
      character(*), parameter :: standard_name_1  = 'short_name_1.component_name_1'
      character(*), parameter :: standard_name_2  = 'short_name_2.component_name_2'

      call field_entry_1%initialize(short_name_1, component_name_1, units=units)
      call field_entry_2%initialize(short_name_2, component_name_2)
      call field_bundle%insert(field_entry_1)
      call field_bundle%insert(field_entry_2)
      @assert_that(field_bundle%size(), is(equal_to(2_INT64)))

      @assert_that(field_registry%size(), is(equal_to(0_INT64)))
      call field_bundle%register(field_registry)
      @assert_that(field_registry%size(), is(equal_to(2_INT64)))

      @assert_that(field_registry%count(standard_name_1), is(equal_to(1_INT64)))
      field_registry_entry = field_registry%at(standard_name_1)
      @assert_that(field_registry_entry%get_short_name()     == short_name_1,     is(true()))
      @assert_that(field_registry_entry%get_component_name() == component_name_1, is(true()))
      @assert_that(field_registry_entry%get_units()          == units,            is(true()))

      @assert_that(field_registry%count(standard_name_2), is(equal_to(1_INT64)))
      field_registry_entry = field_registry%at(standard_name_2)
      @assert_that(field_registry_entry%get_short_name()     == short_name_2,     is(true()))
      @assert_that(field_registry_entry%get_component_name() == component_name_2, is(true()))
      @assert_that(field_registry_entry%get_units()          == default_units,    is(true()))
   end subroutine test_register
end module Test_MAPL_FieldBundle
