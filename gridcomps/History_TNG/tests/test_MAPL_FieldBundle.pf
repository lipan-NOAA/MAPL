#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"

module Test_MAPL_FieldBundle
   use, intrinsic :: iso_fortran_env, only: INT64
   use pFUnit
   use ESMF
   use NUOPC
   use MAPL_ExceptionHandling

   use MAPL_FieldEntryRegistry
   use MAPL_FieldBundleEntry
   use MAPL_FieldBundle

   character(*), parameter :: short_name     = 'short_name'
   character(*), parameter :: component_name = 'component_name'
   character(*), parameter :: units          = 'units'
   character(*), parameter :: alias_name     = 'alias_name'
   character(*), parameter :: entry_name     = 'alias_name.short_name.component_name'

contains
   @test
   subroutine test_map()
      type(FieldBundle)               :: field_collection
      type(FieldBundleEntry)          :: field_entry
      type(FieldBundleEntry), pointer :: field_collection_entry

      call field_entry%initialize(short_name, component_name, units=units, alias_name=alias_name)

      @assert_that(field_collection%size(),            is(equal_to(0_INT64)))
      @assert_that(field_collection%count(entry_name), is(equal_to(0_INT64)))
      call field_collection%insert(field_entry)
      @assert_that(field_collection%size(),            is(equal_to(1_INT64)))
      @assert_that(field_collection%count(entry_name), is(equal_to(1_INT64)))

      field_collection_entry = field_collection%at(entry_name)
      @assert_that(field_collection_entry%get_short_name()     == short_name,     is(true()))
      @assert_that(field_collection_entry%get_component_name() == component_name, is(true()))
      @assert_that(field_collection_entry%get_alias_name()     == alias_name,     is(true()))
   end subroutine test_map
end module Test_MAPL_FieldBundle
