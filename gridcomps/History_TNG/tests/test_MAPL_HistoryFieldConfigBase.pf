#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"
#include "unused_dummy.H"

module Test_MAPL_HistoryFieldConfigBase
   use pFUnit
   use ESMF
   use NUOPC
   use MAPL_ExceptionHandling

   use MAPL_HistoryFieldConfigBase

   character(*), parameter :: registered_name   = 'resgistered_name'
   character(*), parameter :: unregistered_name = 'unresgistered_name'
   character(*), parameter :: syno_name1        = 'syno_name1'
   character(*), parameter :: syno_name2        = 'syno_name2'
   character(*), parameter :: not_syno_name1    = 'not_syno_name1'
   character(*), parameter :: not_syno_name2    = 'not_syno_name2'

   type, extends(HistoryFieldConfigBase) :: test_HistoryFieldConfigBase
      integer :: has_entry = 0
      integer :: add_entry = 0
      integer :: are_syno  = 0
      integer :: add_syno  = 0

      character(:), allocatable :: has_entry_name
      character(:), allocatable :: add_entry_name

      character(:), allocatable :: are_syno_name1
      character(:), allocatable :: are_syno_name2
      character(:), allocatable :: add_syno_name1
      character(:), allocatable :: add_syno_name2
   contains
      procedure :: name
      procedure :: NUOPC_has_entry
      procedure :: NUOPC_add_entry
      procedure :: NUOPC_are_syno
      procedure :: NUOPC_add_syno
   end type test_HistoryFieldConfigBase
contains
   function name(this) result(field_name)
      character(:), allocatable :: field_name
      class(test_HistoryFieldConfigBase), intent(in) :: this

      field_name = this%get_short_name()
   end function name

   subroutine NUOPC_has_entry(this, name, has_entry, rc)
      class(test_HistoryFieldConfigBase), intent(inout) :: this
      character(*),                       intent(in   ) :: name
      logical,                            intent(  out) :: has_entry
      integer, optional,                  intent(  out) :: rc

      integer :: status = 0

      this%has_entry = this%has_entry + 1
      this%has_entry_name = name

      select case (name)
      case (registered_name)
         has_entry = .true.
      case (unregistered_name)
         has_entry = .false.
      case default
         status = 1
      end select

      _RETURN(status)
   end subroutine NUOPC_has_entry

   subroutine NUOPC_add_entry(this, name, rc)
      class(test_HistoryFieldConfigBase), intent(inout) :: this
      character(*),                       intent(in   ) :: name
      integer, optional,                  intent(  out) :: rc

      integer :: status = 0

      this%add_entry = this%add_entry + 1
      this%add_entry_name = name

      _RETURN(status)
   end subroutine NUOPC_add_entry

   subroutine NUOPC_are_syno(this, name1, name2, are_syno, rc)
      class(test_HistoryFieldConfigBase), intent(inout) :: this
      character(*),                       intent(in   ) :: name1
      character(*),                       intent(in   ) :: name2
      logical,                            intent(  out) :: are_syno
      integer, optional,                  intent(  out) :: rc

      integer :: status

      this%are_syno = this%are_syno + 1
      this%are_syno_name1 = name1
      this%are_syno_name2 = name2

      are_syno = ((name1 == syno_name1) .and. (name2 == syno_name2))

      _RETURN(_SUCCESS)
   end subroutine NUOPC_are_syno

   subroutine NUOPC_add_syno(this, name1, name2, rc)
      class(test_HistoryFieldConfigBase), intent(inout) :: this
      character(*),                       intent(in   ) :: name1
      character(*),                       intent(in   ) :: name2
      integer, optional,                  intent(  out) :: rc

      integer :: status

      this%add_syno = this%add_syno + 1
      this%add_syno_name1 = name1
      this%add_syno_name2 = name2

      _RETURN(_SUCCESS)
   end subroutine NUOPC_add_syno

   @test
   subroutine test_standard_name()
      type(test_HistoryFieldConfigBase) :: field_config

      call field_config%initialize('name', 'component')
      @assert_that(field_config%standard_name(), is(equal_to('name.component')))
   end subroutine test_standard_name

   @test
   subroutine test_register_name()
      type(test_HistoryFieldConfigBase) :: field_config_no_add
      type(test_HistoryFieldConfigBase) :: field_config_add

      integer :: status

      @assert_that(field_config_no_add%has_entry, is(equal_to(0)))
      @assert_that(field_config_no_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_config_no_add%has_entry_name), is(false()))
      @assert_that(allocated(field_config_no_add%add_entry_name), is(false()))

      call field_config_no_add%register_name(registered_name, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_config_no_add%has_entry, is(equal_to(1)))
      @assert_that(field_config_no_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_config_no_add%has_entry_name), is(true()))
      @assert_that(allocated(field_config_no_add%add_entry_name), is(false()))
      @assert_that(field_config_no_add%has_entry_name == registered_name, is(true()))

      @assert_that(field_config_add%has_entry, is(equal_to(0)))
      @assert_that(field_config_add%add_entry, is(equal_to(0)))
      @assert_that(allocated(field_config_add%has_entry_name), is(false()))
      @assert_that(allocated(field_config_add%add_entry_name), is(false()))

      call field_config_add%register_name(unregistered_name, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_config_add%has_entry, is(equal_to(1)))
      @assert_that(field_config_add%add_entry, is(equal_to(1)))
      @assert_that(allocated(field_config_add%has_entry_name), is(true()))
      @assert_that(allocated(field_config_add%add_entry_name), is(true()))
      @assert_that(field_config_add%has_entry_name == unregistered_name, is(true()))
      @assert_that(field_config_add%add_entry_name == unregistered_name, is(true()))
   end subroutine test_register_name

   @test
   subroutine test_register_syno()
      type(test_HistoryFieldConfigBase) :: field_config_no_syno
      type(test_HistoryFieldConfigBase) :: field_config_syno

      integer :: status

      @assert_that(field_config_no_syno%are_syno, is(equal_to(0)))
      @assert_that(field_config_no_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_config_no_syno%are_syno_name1), is(false()))
      @assert_that(allocated(field_config_no_syno%are_syno_name2), is(false()))
      @assert_that(allocated(field_config_no_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_config_no_syno%add_syno_name2), is(false()))

      call field_config_no_syno%register_syno(not_syno_name1, not_syno_name2, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_config_no_syno%are_syno, is(equal_to(1)))
      @assert_that(field_config_no_syno%add_syno, is(equal_to(1)))
      @assert_that(allocated(field_config_no_syno%are_syno_name1), is(true()))
      @assert_that(allocated(field_config_no_syno%are_syno_name2), is(true()))
      @assert_that(allocated(field_config_no_syno%add_syno_name1), is(true()))
      @assert_that(allocated(field_config_no_syno%add_syno_name2), is(true()))
      @assert_that(field_config_no_syno%are_syno_name1 == not_syno_name1, is(true()))
      @assert_that(field_config_no_syno%are_syno_name2 == not_syno_name2, is(true()))
      @assert_that(field_config_no_syno%add_syno_name1 == not_syno_name1, is(true()))
      @assert_that(field_config_no_syno%add_syno_name2 == not_syno_name2, is(true()))

      @assert_that(field_config_syno%are_syno, is(equal_to(0)))
      @assert_that(field_config_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_config_syno%are_syno_name1), is(false()))
      @assert_that(allocated(field_config_syno%are_syno_name2), is(false()))
      @assert_that(allocated(field_config_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_config_syno%add_syno_name2), is(false()))

      call field_config_syno%register_syno(syno_name1, syno_name2, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(field_config_syno%are_syno, is(equal_to(1)))
      @assert_that(field_config_syno%add_syno, is(equal_to(0)))
      @assert_that(allocated(field_config_syno%are_syno_name1), is(true()))
      @assert_that(allocated(field_config_syno%are_syno_name2), is(true()))
      @assert_that(allocated(field_config_syno%add_syno_name1), is(false()))
      @assert_that(allocated(field_config_syno%add_syno_name2), is(false()))
      @assert_that(field_config_syno%are_syno_name1 == syno_name1, is(true()))
      @assert_that(field_config_syno%are_syno_name2 == syno_name2, is(true()))
   end subroutine test_register_syno
end module Test_MAPL_HistoryFieldConfigBase
