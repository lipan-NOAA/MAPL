#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"

module Test_MAPL_FieldRegistryEntry
   use, intrinsic :: iso_fortran_env, only: INT64
   use pFUnit
   use ESMF
   use NUOPC
   use MAPL_ExceptionHandling

   use MAPL_FieldRegistryEntry

   character(*), parameter :: short_name     = 'short_name'
   character(*), parameter :: component_name = 'component_name'
   character(*), parameter :: std_out_name   = 'std_out_name'

   type, extends(FieldRegistryEntry) :: test_FieldRegistryEntry
      integer :: call_standard_name = 0
   contains
      procedure :: standard_name
   end type test_FieldRegistryEntry
contains
   function standard_name(this) result(std_name)
      character(:), allocatable :: std_name
      class(test_FieldRegistryEntry), intent(inout) :: this

      this%call_standard_name = this%call_standard_name + 1

      std_name = std_out_name
   end function standard_name

   @test
   subroutine test_initialize()
      type(FieldRegistryEntry) :: field_entry

      @assert_that(field_entry%get_short_name()     == '',     is(true()))
      @assert_that(field_entry%get_component_name() == '',     is(true()))
      call field_entry%initialize(short_name, component_name)
      @assert_that(field_entry%get_short_name()     == short_name,     is(true()))
      @assert_that(field_entry%get_component_name() == component_name, is(true()))
   end subroutine test_initialize

   @test
   subroutine test_name()
      type(test_FieldRegistryEntry) :: field_entry

      @assert_that(field_entry%call_standard_name, is(equal_to(0)))
      call field_entry%initialize(short_name, component_name)
      @assert_that(field_entry%name() == std_out_name, is(true()))
      @assert_that(field_entry%call_standard_name, is(equal_to(1)))
   end subroutine test_name
end module Test_MAPL_FieldRegistryEntry
