#include "MAPL_Generic.h"
#include "NUOPC_ErrLog.h"

module test_GroupRegistry
   use, intrinsic :: iso_fortran_env, only: INT64
   use pFUnit
   use ESMF
   use NUOPC
   use yaFyaml
   use MAPL_ExceptionHandling
   use MAPL_KeywordEnforcerMod

   use GroupMod
   use GroupMapMod
   use GroupRegistryMod

   type, extends(Group) :: mock_Group
      private
      integer :: id
   contains
      procedure :: init
      procedure :: get_id
      procedure :: is_equal_to
      generic   :: operator(==) => is_equal_to
   end type mock_Group
contains
   subroutine init(this, id)
      class(mock_Group), intent(inout) :: this
      integer,           intent(in   ) :: id

      this%id = id
   end subroutine init

   integer function get_id(this)
      class(mock_Group), intent(in) :: this

      get_id = this%id
   end function get_id

   logical function is_equal_to(a, b)
      class(mock_Group), intent(in) :: a
      class(mock_Group), intent(in) :: b

      is_equal_to = (a%id == b%get_id())
   end function is_equal_to

   @test
   subroutine test_map()
      type(GroupRegistry)   :: group_registry
      type(mock_Group)      :: group_entry
      class(Group), pointer :: group_entry_ptr

      character(*), parameter :: group_name = 'group_name'

      integer :: status

      call group_entry%init(10)

      @assert_that(group_registry%size(),            is(equal_to(0_INT64)))
      @assert_that(group_registry%count(group_name), is(equal_to(0_INT64)))
      call group_registry%insert(group_name, group_entry, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(group_registry%size(),            is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name), is(equal_to(1_INT64)))

      group_entry_ptr => group_registry%at(group_name)
      select type (group_entry_ptr)
      type is (mock_Group)
         @assert_that(group_entry_ptr == group_entry, is(true()))
      end select
   end subroutine test_map

   @test
   subroutine test_insert()
      type(GroupRegistry)   :: group_registry
      type(mock_Group)      :: group_entry_1
      type(mock_Group)      :: group_entry_2
      class(Group), pointer :: group_entry_ptr

      character(*), parameter :: group_name_1 = 'group_name_1'
      character(*), parameter :: group_name_2 = 'group_name_2'

      integer :: status

      call group_entry_1%init(1)
      call group_entry_2%init(2)

      call group_registry%insert(group_name_1, group_entry_1, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(group_registry%size(),              is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name_1), is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name_2), is(equal_to(0_INT64)))

      call group_registry%insert(group_name_1, group_entry_1, rc=status)
      @assert_that(status, is(equal_to(1)))
      @assert_that(group_registry%size(),              is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name_1), is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name_2), is(equal_to(0_INT64)))

      call group_registry%insert(group_name_2, group_entry_2, rc=status)
      @assert_that(status, is(equal_to(0)))
      @assert_that(group_registry%size(),              is(equal_to(2_INT64)))
      @assert_that(group_registry%count(group_name_1), is(equal_to(1_INT64)))
      @assert_that(group_registry%count(group_name_2), is(equal_to(1_INT64)))

      group_entry_ptr => group_registry%at(group_name_1)
      select type (group_entry_ptr)
      type is (mock_Group)
         @assert_that(group_entry_ptr == group_entry_1, is(true()))
         @assert_that(group_entry_ptr == group_entry_2, is(false()))
      end select

      group_entry_ptr => group_registry%at(group_name_2)
      select type (group_entry_ptr)
      type is (mock_Group)
         @assert_that(group_entry_ptr == group_entry_1, is(false()))
         @assert_that(group_entry_ptr == group_entry_2, is(true()))
      end select
   end subroutine test_insert
end module test_GroupRegistry
